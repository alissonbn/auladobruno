AWSTemplateFormatVersion: 2010-09-09
Description: DevOps on AWS - Lab 2 Template
Parameters:
  KeyName:
    Type: 'AWS::EC2::KeyPair::KeyName'
    Description: Keyname for the keypair for the jumphost
  AWSAccessKey:
    Description: Access key for our lab user.
    Type: String
  AWSSecretAccessKey:
    Description: Secret access key for our lab user.
    Type: String
  VPCCIDR:
    Description: CIDR Block for VPC
    Type: String
    Default: 10.20.0.0/16
    AllowedValues:
      - 10.20.0.0/16
  PublicSubnet1Param:
    Description: Public Subnet 1
    Type: String
    Default: 10.20.10.0/24
    AllowedValues:
      - 10.20.10.0/24
  LabName:
    Type: String
    Default: lab-2-CodeDeploy
  LabUrlPrefix:
    Type: String
    Default: 'http://us-west-2-tcprod.s3.amazonaws.com/courses/ILT-TF-200-DEVOPS/v3.0.11'
  LatestWindows2019AMI:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: /aws/service/ami-windows-latest/Windows_Server-2019-English-Full-Base
  pInstanceRoleManagedPolicy:
    Description: Managed Policy to attach to EC2 instance
    Type: String
    Default: AmazonSSMManagedInstanceCore
    AllowedValues:
    - AmazonSSMManagedInstanceCore
Resources:
  Cloud9:
    Type: 'AWS::Cloud9::EnvironmentEC2'
    Properties:
      InstanceType: t2.micro
      SubnetId: !Ref PublicSubnet1
      OwnerArn: !Sub arn:aws:iam::${AWS::AccountId}:user/awsstudent
      Name: Lab-2
  CodeDeployServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: CodeDeployServiceRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service:
                - codedeploy.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole'
      Path: /
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: Lab VPC
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    DependsOn: VPC
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    DependsOn: AttachGateway
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1Param
      AvailabilityZone: !Select 
        - '0'
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: Public Subnet 1
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    DependsOn:
      - AttachGateway
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public
  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn:
      - AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
      - AttachGateway
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
#  SSMRole:
#   Type: AWS::IAM::Role
#   Properties:
#     RoleName: !Sub 'ec2SSMRole-${AWS::StackName}'
#     AssumeRolePolicyDocument:
#       Version: '2012-10-17'
#       Statement:
#         - Effect: Allow
#           Principal:
#             Service:
#               - ec2.amazonaws.com
#           Action:
#             - 'sts:AssumeRole'
#     Path: /
#     ManagedPolicyArns: 
#     - !Sub 'arn:${AWS::Partition}:iam::aws:policy/${pInstanceRoleManagedPolicy}'
  SSMRoleInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub 'ec2SSMRole-${AWS::StackName}'
      Path: /
      Roles: 
      - !Ref EC2Role
  EC2Role:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: EC2InstanceRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AWSElasticBeanstalkMulticontainerDocker'
        - 'arn:aws:iam::aws:policy/AWSElasticBeanstalkWorkerTier'
        - 'arn:aws:iam::aws:policy/AWSElasticBeanstalkWebTier'
        - !Sub 'arn:aws:iam::aws:policy/${pInstanceRoleManagedPolicy}'
      Path: /
      Policies:
        - PolicyName: AllowS3Access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 's3:Get*'
                  - 's3:List*'
                Effect: Allow
                Resource: '*'
  EC2Profile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      InstanceProfileName: EC2InstanceRole
      Path: /
      Roles: #required
        - !Ref EC2Role
  ReadOnlyGroup:
    Type: "AWS::IAM::Group"
    Properties:
      GroupName: QLReadOnly
      ManagedPolicyArns: [ "arn:aws:iam::aws:policy/ReadOnlyAccess" ]
  GroupAssignment:
    Type: "AWS::IAM::UserToGroupAddition"
    DependsOn: ReadOnlyGroup
    Properties:
      GroupName: QLReadOnly
      Users:
        - awsstudent
Outputs:
  LabRegion:
    Description: This is the AWS region that this lab was launched in.
    Value: !Ref "AWS::Region"
    Export:
      Name: LabRegion