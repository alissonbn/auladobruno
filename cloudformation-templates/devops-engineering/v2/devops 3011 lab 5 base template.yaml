AWSTemplateFormatVersion: 2010-09-09 
Description: >- 
  This template deploys a VPC, with a pair of public subnets spread 
  across two Availability Zones. It deploys an Internet Gateway, with a default 
  route on the public subnets. 
Parameters: 
  EnvironmentName: 
    Description: An environment name that will be prefixed to resource names 
    Type: String 
    Default: Lab5 
  VpcCIDR: 
    Description: Please enter the IP range (CIDR notation) for this VPC 
    Type: String 
    Default: 10.192.0.0/16 
  PublicSubnet1CIDR: 
    Description: >- 
      Please enter the IP range (CIDR notation) for the public subnet in the 
      first Availability Zone 
    Type: String 
    Default: 10.192.10.0/24 
  ALBSub1: 
    Description: Load Balancer PubSub1 
    Type: String 
    Default: 10.192.20.0/24 
  ALBSub2: 
    Description: Load Balancer PubSub2 
    Type: String 
    Default: 10.192.30.0/24 
  PrivateSubnet1CIDR: 
    Description: >- 
      Please enter the IP range (CIDR notation) for the private subnet in the 
      first Availability Zone 
    Type: String 
    Default: 10.192.40.0/24 
  PrivateSubnet2CIDR: 
    Description: >- 
      Please enter the IP range (CIDR notation) for the private subnet in the 
      second Availability Zone 
    Type: String 
    Default: 10.192.50.0/24 
Resources: 
  VPC: 
    Type: 'AWS::EC2::VPC' 
    Properties: 
      CidrBlock: !Ref VpcCIDR 
      EnableDnsSupport: true 
      EnableDnsHostnames: true 
      Tags: 
        - Key: Name 
          Value: !Sub '${EnvironmentName} VPC' 
  InternetGateway: 
    Type: 'AWS::EC2::InternetGateway' 
    Properties: 
      Tags: 
        - Key: Name 
          Value: !Sub '${EnvironmentName} IG' 
  InternetGatewayAttachment: 
    Type: 'AWS::EC2::VPCGatewayAttachment' 
    Properties: 
      InternetGatewayId: !Ref InternetGateway 
      VpcId: !Ref VPC 
  PublicSubnet1: 
    Type: 'AWS::EC2::Subnet' 
    Properties: 
      VpcId: !Ref VPC 
      AvailabilityZone: !Select  
        - 0 
        - !GetAZs '' 
      CidrBlock: !Ref PublicSubnet1CIDR 
      MapPublicIpOnLaunch: true 
      Tags: 
        - Key: Name 
          Value: !Sub '${EnvironmentName} Public Subnet (AZ1)' 
  ALBPublicSubnet1: 
    Type: 'AWS::EC2::Subnet' 
    Properties: 
      VpcId: !Ref VPC 
      AvailabilityZone: !Select  
        - 1 
        - !GetAZs '' 
      CidrBlock: !Ref ALBSub1 
      MapPublicIpOnLaunch: true 
      Tags: 
        - Key: Name 
          Value: !Sub '${EnvironmentName} ALB Public Subnet (AZ1)' 
  ALBPublicSubnet2: 
    Type: 'AWS::EC2::Subnet' 
    Properties: 
      VpcId: !Ref VPC 
      AvailabilityZone: !Select  
        - 2 
        - !GetAZs '' 
      CidrBlock: !Ref ALBSub2 
      MapPublicIpOnLaunch: true 
      Tags: 
        - Key: Name 
          Value: !Sub '${EnvironmentName} ALB Public Subnet (AZ2)' 
  PublicRouteTable: 
    Type: 'AWS::EC2::RouteTable' 
    Properties: 
      VpcId: !Ref VPC 
      Tags: 
        - Key: Name 
          Value: !Sub '${EnvironmentName} Public Routes' 
  DefaultPublicRoute: 
    Type: 'AWS::EC2::Route' 
    DependsOn: InternetGatewayAttachment 
    Properties: 
      RouteTableId: !Ref PublicRouteTable 
      DestinationCidrBlock: 0.0.0.0/0 
      GatewayId: !Ref InternetGateway 
  PublicSubnet1RouteTableAssociation: 
    Type: 'AWS::EC2::SubnetRouteTableAssociation' 
    Properties: 
      RouteTableId: !Ref PublicRouteTable 
      SubnetId: !Ref PublicSubnet1 
  ALBPublicSubnet1RouteTableAssociation: 
    Type: 'AWS::EC2::SubnetRouteTableAssociation' 
    Properties: 
      RouteTableId: !Ref PublicRouteTable 
      SubnetId: !Ref ALBPublicSubnet1 
  ALBPublicSubnet2RouteTableAssociation: 
    Type: 'AWS::EC2::SubnetRouteTableAssociation' 
    Properties: 
      RouteTableId: !Ref PublicRouteTable 
      SubnetId: !Ref ALBPublicSubnet2 
  Cloud9: 
    Type: 'AWS::Cloud9::EnvironmentEC2' 
    DependsOn: 
      - GoldRepo 
      - AppRepo 
    Properties: 
      Name: Lab5 
      InstanceType: t2.micro 
      SubnetId: !Ref PublicSubnet1 
      OwnerArn: !Sub 'arn:aws:iam::${AWS::AccountId}:user/awsstudent' 
      Repositories: 
        - PathComponent: /local_repo/gold-repo 
          RepositoryUrl: !Sub 'https://git-codecommit.${AWS::Region}.amazonaws.com/v1/repos/gold-repo' 
        - PathComponent: /local_repo/my-webapp-repo 
          RepositoryUrl: !Sub 'https://git-codecommit.${AWS::Region}.amazonaws.com/v1/repos/my-webapp-repo' 
  BGCluster: 
    Type: AWS::ECS::Cluster 
    Properties:  
      ClusterName: my-webapp-cluster 
  AppLoadBalancer: 
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer' 
    DependsOn: 
      - InternetGateway 
      - InternetGatewayAttachment 
    Properties: 
      Name: MyApp-ALB 
      Scheme: internet-facing 
      LoadBalancerAttributes: 
        - Key: idle_timeout.timeout_seconds 
          Value: '30' 
      IpAddressType: ipv4 
      Type: application 
      Subnets: 
        - !Ref ALBPublicSubnet1 
        - !Ref ALBPublicSubnet2 
      SecurityGroups: 
        - !Ref ALBsg 
  TargetGroup1: 
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup' 
    Properties: 
      HealthCheckIntervalSeconds: 10 
      HealthCheckPath: / 
      HealthyThresholdCount: 2 
      UnhealthyThresholdCount: 2 
      TargetType: ip 
      Matcher: 
        HttpCode: '200' 
      Name: MyApp-ALB-target1 
      Port: '80' 
      Protocol: HTTP 
      VpcId: !Ref VPC 
      Tags: 
        - Key: Name 
          Value: MyApp-ALB-target1 
  TargetGroup2: 
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup' 
    Properties: 
      HealthCheckIntervalSeconds: 10 
      HealthCheckPath: / 
      HealthyThresholdCount: 2 
      UnhealthyThresholdCount: 2 
      TargetType: ip 
      Matcher: 
        HttpCode: '200' 
      Name: MyApp-ALB-target2 
      Port: '80' 
      Protocol: HTTP 
      VpcId: !Ref VPC 
      Tags: 
        - Key: Name 
          Value: Target Group 2-8080 
  ALBListener1: 
    Type: AWS::ElasticLoadBalancingV2::Listener 
    Properties: 
      DefaultActions: 
      - Type: forward 
        TargetGroupArn: !Ref TargetGroup1 
      LoadBalancerArn: !Ref AppLoadBalancer 
      Port: '80' 
      Protocol: HTTP 
  ALBListener2: 
    Type: AWS::ElasticLoadBalancingV2::Listener 
    Properties: 
      DefaultActions: 
      - Type: forward 
        TargetGroupArn: !Ref TargetGroup2 
      LoadBalancerArn: !Ref AppLoadBalancer 
      Port: '8080' 
      Protocol: HTTP   
  GoldRepo: 
    Type: 'AWS::CodeCommit::Repository' 
    Properties: 
      Code: 
        S3: 
          Bucket: !Sub '${AWS::Region}-tcprod'
          Key: courses/ILT-TF-200-DEVOPS/v3.0.11/lab-5-CICDwECS/scripts/gold-repo.zip 
      RepositoryDescription: Repository for Lab5 gold-repo code 
      RepositoryName: gold-repo 
  AppRepo: 
    Type: 'AWS::CodeCommit::Repository' 
    Properties: 
      Code: 
        S3: 
          Bucket: !Sub '${AWS::Region}-tcprod'
          Key: courses/ILT-TF-200-DEVOPS/v3.0.11/lab-5-CICDwECS/scripts/my-webapp-repo.zip 
      RepositoryDescription: Repository for webapp code 
      RepositoryName: my-webapp-repo 
  goldECRrepo: 
    Type: 'AWS::ECR::Repository' 
    Properties: 
      RepositoryName: gold-repo 
  webappECRrepo: 
    Type: 'AWS::ECR::Repository' 
    Properties: 
      RepositoryName: my-webapp-repo 
  CodeDeployServiceRole: 
    Type: 'AWS::IAM::Role' 
    Properties: 
      AssumeRolePolicyDocument: 
        Version: 2012-10-17 
        Statement: 
          - Effect: Allow 
            Principal: 
              Service: codedeploy.amazonaws.com 
            Action: 
              - 'sts:AssumeRole' 
      Description: Lab5 CodeDeploy Service Role 
      ManagedPolicyArns: 
        - 'arn:aws:iam::aws:policy/AWSCodeDeployRoleForECS' 
      Policies: 
        - PolicyName: lab5-CICD-Policy 
          PolicyDocument: 
            Statement: 
              - Effect: Allow 
                Action: 
                  - 'logs:CreateLogStream' 
                  - 'logs:CreateLogGroup' 
                  - 'logs:PutLogEvents'  
                  - "s3:PutObject" 
                  - "s3:GetObject" 
                  - "s3:GetBucketAcl" 
                  - "s3:GetBucketLocation" 
                  - "s3:GetObjectVersion" 
                Resource: '*' 
      RoleName: CodeDeploy_Service_Role 
  CodeBuildServiceRole: 
    Type: 'AWS::IAM::Role' 
    Properties: 
      AssumeRolePolicyDocument: 
        Version: 2012-10-17 
        Statement: 
          - Effect: Allow 
            Principal: 
              Service: codebuild.amazonaws.com 
            Action: 
              - 'sts:AssumeRole' 
      Description: Lab5 CodeDeploy Role 
      ManagedPolicyArns: 
        - 'arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser' 
      Policies: 
        - PolicyName: lab5-CICD-Policy 
          PolicyDocument: 
            Statement: 
              - Effect: Allow 
                Action: 
                  - 'logs:CreateLogStream' 
                  - 'logs:CreateLogGroup' 
                  - 'logs:PutLogEvents'  
                  - "s3:PutObject" 
                  - "s3:GetObject" 
                  - "s3:GetBucketAcl" 
                  - "s3:GetBucketLocation" 
                  - "s3:GetObjectVersion" 
                Resource: '*' 
      RoleName: CodeBuild_Service_Role 
  ecsTaskDefinitionRole: 
    Type: 'AWS::IAM::Role' 
    Properties: 
      AssumeRolePolicyDocument: 
        Version: 2012-10-17 
        Statement: 
          - Effect: Allow 
            Principal: 
              Service: ecs-tasks.amazonaws.com 
            Action: 
              - 'sts:AssumeRole' 
      Description: Lab5 Task Definition Role for ECS 
      ManagedPolicyArns: 
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy' 
      Policies: 
        - PolicyName: lab5-CICD-Policy 
          PolicyDocument: 
            Statement: 
              - Effect: Allow 
                Action: 
                  - 'logs:CreateLogStream' 
                  - 'logs:CreateLogGroup' 
                  - 'logs:PutLogEvents'  
                  - "s3:PutObject" 
                  - "s3:GetObject" 
                  - "s3:GetBucketAcl" 
                  - "s3:GetBucketLocation" 
                  - "s3:GetObjectVersion" 
                Resource: '*' 
      RoleName: Task_Definition_Role 
  NoIngressSecurityGroup: 
    Type: 'AWS::EC2::SecurityGroup' 
    Properties: 
      GroupName: no-ingress-sg 
      GroupDescription: Security group with no ingress rule 
      VpcId: !Ref VPC 
  ALBsg: 
    Type: 'AWS::EC2::SecurityGroup' 
    Properties: 
      GroupDescription: ALB Security Group 
      VpcId: !Ref VPC 
  ALBsg1inbound: 
    Type: 'AWS::EC2::SecurityGroupIngress' 
    Properties: 
      GroupId: !Ref ALBsg 
      IpProtocol: tcp 
      FromPort: '80' 
      ToPort: '80' 
      CidrIp: 0.0.0.0/0 
  ALBsg2inbound: 
    Type: 'AWS::EC2::SecurityGroupIngress' 
    Properties: 
      GroupId: !Ref ALBsg 
      IpProtocol: tcp 
      FromPort: '8080' 
      ToPort: '8080' 
      CidrIp: 0.0.0.0/0 
  ReadOnlyGroup:
    Type: "AWS::IAM::Group"
    Properties:
      GroupName: QLReadOnly
      ManagedPolicyArns: [ "arn:aws:iam::aws:policy/ReadOnlyAccess" ]
  GroupAssignment:
    Type: "AWS::IAM::UserToGroupAddition"
    DependsOn: ReadOnlyGroup
    Properties:
      GroupName: QLReadOnly
      Users:
        - awsstudent
Outputs: 
#  VPCID: 
#    Description: Lab VPC ID 
#    Value: !Ref VPC 
#  PublicSubnet1ID: 
#    Description: Subnet ID for the Public Subnet 
#    Value: !Ref PublicSubnet1 
  Subnet1: 
    Description: Subnet ID for one ALB Subnet 
    Value: !Ref ALBPublicSubnet1 
  Subnet2: 
    Description: Subnet ID for one ALB Subnet 
    Value: !Ref ALBPublicSubnet2 
  SecurityGroupID: 
    Description: Group ID for the Lab Security Group 
    Value: !Ref ALBsg 
  TargetGroup1ARN: 
    Description: ARN for one Target Group 
    Value: !Ref TargetGroup1 
#  TargetGroup2ARN: 
#    Description: ARN for another Target Group 
#    Value: !Ref TargetGroup2 
  URIgoldECRrepo: 
    Description: URI for the ECR repo gold-repo 
    Value: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/gold-repo' 
  URIwebappECRrepo: 
    Description: URI for the ECR repo my-webapp-repo 
    Value: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/my-webapp-repo' 
#  CodeBuildServiceRoleARN: 
#    Description: ARN for the CodeBuild Service Role 
#    Value: !GetAtt CodeBuildServiceRole.Arn 
  ecsTaskDefinitionRoleARN: 
    Description: ARN for the Task Definition Role 
    Value: !GetAtt ecsTaskDefinitionRole.Arn 
#  CodeDeployServiceRoleARN: 
#    Description: ARN for the CodeBuild Service Role 
#    Value: !GetAtt CodeDeployServiceRole.Arn 
  LoadBalancerDNSName: 
    Description: The DNS Name of the load balancer 
    Value: !GetAtt AppLoadBalancer.DNSName 
  LabRegion:
    Description: This is the AWS region that this lab was launched in.
    Value: !Ref "AWS::Region"
    Export:
      Name: LabRegion