AWSTemplateFormatVersion: 2010-09-09
Description: Base Lab4 Environment
Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String
    Default: Lab4
  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.187.0.0/16
  PublicSubnet1CIDR:
    Description: >-
      Please enter the IP range (CIDR notation) for the public subnet in the 
      first Availability Zone 
    Type: String
    Default: 10.187.10.0/24
  LambdaSub1:
    Description: Load Balancer PubSub1
    Type: String
    Default: 10.187.50.0/24
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} VPC'
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} IG'
  InternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select 
        - 0
        - !GetAZs ''
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} Public Subnet (AZ1)'
  LambdaPublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select 
        - 1
        - !GetAZs ''
      CidrBlock: !Ref LambdaSub1
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} Lambda Public Subnet (AZ1)'
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} Public Routes'
  DefaultPublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1
  LambdaPublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref LambdaPublicSubnet1
  Cloud9:
    Type: 'AWS::Cloud9::EnvironmentEC2'
    DependsOn:
      - lab4Repo
    Properties:
      Name: Lab4
      InstanceType: t2.medium
      SubnetId: !Ref PublicSubnet1
      OwnerArn: !Sub 'arn:aws:iam::${AWS::AccountId}:user/awsstudent'
      Repositories:
        - PathComponent: /lab4-app
          RepositoryUrl: !Sub >-
            https://git-codecommit.${AWS::Region}.amazonaws.com/v1/repos/lab4-app
  lab4Repo:
    Type: 'AWS::CodeCommit::Repository'
    Properties:
      Code:
        S3:
          Bucket: !Sub '${AWS::Region}-tcprod'
          Key: courses/ILT-TF-200-DEVOPS/v3.0.11/lab-4-SAM/bundles/lab4-app.zip
      RepositoryDescription: Repository for Lab4 code
      RepositoryName: lab4-app
  CodeDeployServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codedeploy.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Description: Lab4 CodeDeploy Service Role
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSCodeDeployRoleForLambda'
      Policies:
        - PolicyName: lab4-CICD-Policy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:CreateLogGroup'
                  - 'logs:PutLogEvents'
                  - 's3:PutObject'
                  - 's3:GetObject'
                  - 's3:GetBucketAcl'
                  - 's3:GetBucketLocation'
                  - 's3:GetObjectVersion'
                Resource: '*'
      RoleName: CodeDeploy_Service_Role
  CodeBuildServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Description: Lab4 CodeDeploy Role
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
      Policies:
        - PolicyName: lab4-CICD-Policy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:CreateLogGroup'
                  - 'logs:PutLogEvents'
                  - 's3:PutObject'
                  - 's3:GetObject'
                  - 's3:GetBucketAcl'
                  - 's3:GetBucketLocation'
                  - 's3:GetObjectVersion'
                Resource: '*'
      RoleName: CodeBuild_Service_Role
  SAMCloudFormationRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - cloudformation.amazonaws.com
                - s3.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Description: Lab4 CloudFormation role for SAM
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
        - 'arn:aws:iam::aws:policy/AWSLambdaExecute'
      Policies:
        - PolicyName: lab4-SAM-Policy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'apigateway:*'
                  - 'codedeploy:*'
                  - 'lambda:*'
                  - 'cloudformation:CreateChangeSet'
                  - 'iam:GetRole'
                  - 'iam:CreateRole'
                  - 'iam:DeleteRole'
                  - 'iam:PutRolePolicy'
                  - 'iam:AttachRolePolicy'
                  - 'iam:DeleteRolePolicy'
                  - 'iam:DetachRolePolicy'
                  - 'iam:PassRole'
                  - 'logs:CreateLogStream'
                  - 'logs:CreateLogGroup'
                  - 'logs:PutLogEvents'
                  - 's3:PutObject'
                  - 's3:GetObject'
                  - 's3:GetBucketAcl'
                  - 's3:GetBucketLocation'
                  - 's3:GetObjectVersion'
                Resource: '*'
      RoleName: SAM_Role
  NoIngressSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: no-ingress-sg
      GroupDescription: Security group with no ingress rule
      VpcId: !Ref VPC
  ReadOnlyGroup:
    Type: "AWS::IAM::Group"
    Properties:
      GroupName: QLReadOnly
      ManagedPolicyArns: [ "arn:aws:iam::aws:policy/ReadOnlyAccess" ]
  GroupAssignment:
    Type: "AWS::IAM::UserToGroupAddition"
    DependsOn: ReadOnlyGroup
    Properties:
      GroupName: QLReadOnly
      Users:
        - awsstudent
Outputs:
  LabRegion:
    Description: This is the AWS region that this lab was launched in.
    Value: !Ref "AWS::Region"
    Export:
      Name: LabRegion

Feedback
English (US)
